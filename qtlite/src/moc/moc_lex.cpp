/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvsroot/octopus/qtlite/src/moc/moc_lex.cpp,v 1.1 2003/11/04 10:14:21 Sigma Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 150
#define YY_END_OF_BUFFER 151
static yyconst short int yy_accept[605] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  151,  150,
      138,  149,  150,  138,  133,  145,  138,  145,  145,  104,
      104,  104,  104,  104,  138,  133,  147,  138,  112,  147,
      147,  147,  129,  147,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,  138,  133,  139,  138,  139,  139,  105,  105,
      105,  105,   15,   16,  138,  133,  140,  138,  140,  140,
      106,  106,  106,  106,  106,   28,   29,  138,  133,  144,

      138,   54,   55,   58,  144,   59,   56,   57,   60,  138,
      133,  142,  138,   42,   43,   46,  142,   47,   44,   45,
      138,  133,  143,  138,   48,   49,   52,  143,   53,   50,
       51,  138,  133,  141,  138,  110,  141,   13,   14,  138,
      133,  136,  136,  111,   61,   62,  136,  136,  133,  148,
      138,  148,  138,  133,  146,  138,  146,  138,  133,   34,
       35,   99,   99,   99,   99,   99,  103,  100,  101,  102,
      138,  135,  134,  138,  133,  133,  133,    0,  107,    0,
      104,  104,  104,  104,  104,  112,    0,    0,  122,    0,
        0,  131,  130,  129,   91,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,    0,  108,    0,  105,
      105,  105,  105,  105,  105,    0,  109,    0,  106,  106,
      106,  106,  106,  110,    0,  137,  111,    0,  137,   99,
       99,   99,   99,   99,   99,  103,    0,  134,  133,  104,
      104,  104,  104,  113,    0,    0,  113,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   92,  130,
       98,   98,   98,   98,   98,   86,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   75,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  106,
      106,  106,  106,   99,   99,   99,   99,   99,   99,  133,
      104,  104,  104,  104,  128,  124,  123,  125,    0,  126,
      121,  114,  115,  116,  117,  118,  119,  120,    0,   98,
       98,   98,   98,   98,   98,   65,   73,   98,   98,   98,
       82,   98,   98,   98,   98,   76,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   81,   98,  105,  105,  105,

      105,  105,  105,  105,  105,  105,  105,  105,  106,  106,
      106,  106,   99,   36,   99,   99,   99,   99,  133,    1,
      104,  104,    3,  126,  127,   98,   98,   98,   98,   98,
       98,   83,   71,   98,   98,   79,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   74,   98,   98,    7,   98,
       98,   98,   95,   98,   85,   98,   96,   98,   98,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,   21,
       30,  106,  106,   33,   99,   39,   99,   99,   37,  133,
      104,  104,   98,   98,   98,   98,   98,   12,   80,   68,
       63,   69,   98,   98,   98,   98,   98,   89,   98,   98,

       77,   67,   84,   98,   98,   98,   98,   98,  105,  105,
      105,  105,  105,   27,  105,  105,   17,  105,  106,  106,
       99,   99,   38,  133,  104,  104,   98,   11,   98,   98,
       98,   94,   98,   98,   87,   98,   98,    6,   98,   64,
       98,   70,   98,  105,   26,  105,  105,  105,   19,  105,
       20,  106,  106,   99,   99,  133,  133,  104,    4,   98,
        5,   98,   98,   98,   90,   98,   66,   93,   78,   72,
      105,   23,  105,  105,  105,  106,   31,   99,   99,  132,
        2,   98,   98,   98,   97,   88,  105,  105,  105,   18,
       32,   99,   99,   98,   10,    9,  105,   25,   24,   40,

       41,    8,   22,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    5,    6,    1,    1,    1,    7,    8,
        9,   10,    1,   11,    1,   12,   13,   14,   15,   15,
       15,   15,   15,   15,   15,   16,   16,   17,   18,   19,
        1,   20,    1,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   28,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   28,   43,   28,
       44,   45,   46,    1,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   28,   28,   57,   58,   59,
       60,   61,   28,   62,   63,   64,   65,   66,   67,   68,
       69,   28,   70,    1,   71,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[72] =
    {   0,
        1,    1,    1,    2,    3,    1,    4,    1,    1,    1,
        1,    1,    1,    5,    5,    5,    1,    1,    1,    1,
        5,    5,    5,    5,    5,    5,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    1,    1,    1,    6,    5,    5,    5,
        5,    5,    5,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    1,
        1
    } ;

static yyconst short int yy_base[632] =
    {   0,
        0,    3,   16,    5,   87,    9,  158,  229,  300,  176,
      370,  440,  207,  510,  382,  555,  184,  399,  600,  645,
      188,  254,  204,  266,  691,  177,  278,  416, 1180, 1181,
      182, 1181,  183,  220, 1128, 1181,  196,  207,  214,    0,
     1121, 1129, 1124, 1112,  260, 1123, 1181,  211, 1128,  243,
      281,  251,  382, 1155,    0, 1124,  213,  320, 1110,  226,
      138, 1110, 1108, 1102, 1118, 1104,  327, 1112,  351,  378,
      350,  375,  434, 1112, 1181,  408,  394,  442,    0, 1115,
      392,  403, 1181, 1181,  459, 1110, 1181,  461,  427,  458,
        0, 1103, 1111, 1106, 1094, 1181, 1181,  471, 1105, 1181,

      464, 1181, 1181, 1181,  465, 1181, 1181, 1181, 1181,  477,
     1104, 1181,  479, 1181, 1181, 1181,  475, 1181, 1181, 1181,
      487, 1103, 1181,  489, 1181, 1181, 1181,  484, 1181, 1181,
     1181,  493, 1102, 1181,  498, 1107,  492, 1181, 1181,  501,
     1100, 1181,  506, 1105, 1181, 1181,  507,  523, 1098, 1181,
      528,  514,  530, 1097, 1181,  532,  527,  536, 1096, 1181,
     1181,    0, 1121, 1120,  411, 1107, 1098, 1181, 1181, 1181,
      541, 1181,    0,  543,    0,    0, 1090,  505, 1181, 1137,
        0, 1092, 1081, 1080, 1081, 1091,  543, 1128, 1127,  758,
     1121,  537,  555,  560, 1181,    0,  554, 1074, 1067, 1082,

     1081, 1069, 1062, 1061, 1061, 1064, 1067,  220, 1063, 1057,
     1062, 1067,  522, 1069, 1063, 1056, 1061, 1054,  493, 1055,
     1050, 1050,  382, 1054, 1047,  524,  517, 1181, 1104,    0,
      560,  530, 1058, 1052, 1045,  555, 1181, 1100,    0, 1055,
     1044, 1043, 1044, 1054,  592,  604, 1053,  606,  612,    0,
     1059,  477, 1059, 1061, 1065, 1048,  612,    0, 1039, 1028,
     1038, 1028, 1029, 1181, 1080, 1079, 1078,  614,  616, 1077,
     1076, 1075, 1074, 1073, 1072, 1071, 1070, 1069, 1181,  610,
     1044, 1041,  465, 1036, 1047,    0, 1011, 1008, 1006, 1005,
     1018, 1008, 1013, 1016, 1011, 1006,    0, 1007, 1012, 1007,

      996,  991,  992,  998,  998,  991,  993,  987,  986,  984,
      987,  987,  994,  985,  988,  984,  978,  990,  992, 1008,
     1005,  543, 1000, 1011,  969,  970,  976,  973,  967,  967,
      977,  967,  968,  997, 1001,  999,  994,  985,  982,  964,
      956,  955,  960,  962, 1181, 1181, 1181, 1181,  620, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1008,  993,
      973,  982,  986,  976,  970,    0,    0,  945,  943,  949,
        0,  943,  940,  944,  943,    0,  952,  937,  951,  950,
      945,  940,  932,  930,  539,  930,  936,  941,  933,  922,
      937,  928,  932,  931,  919,    0,  919,  961,  941,  950,

      954,  944,  938,  928,  923,  918,  925,  909,  908,  907,
      912,  914,  940,    0,  927,  930,  935,  927,  887,    0,
      880,  892,    0, 1181, 1181,  895,  900,  902,  889,  883,
      872,    0,    0,  850,  838,    0,  845,  836,  825,  764,
      759,  757,  769,  768,  752,    0,  758,  763,    0,  763,
      748,  762,    0,  757,    0,  749,    0,  757,  748,  764,
      769,  775,  762,  763,  759,  732,  745,  744,  736,    0,
        0,  731,  743,    0,  757,    0,  750,  764,    0,  735,
      738,  721,  746,  745,  759,  744,  755,    0,    0,    0,
        0,    0,  727,  730,  717,  724,  711,    0,  722,  708,

        0,    0,    0,  706,  716,  716,  710,  709,  726,  652,
      665,  650,  661,    0,  633,  620,    0,  620,  634,  617,
      659,  658,    0,  633,  627,  624,  646,    0,  635,  644,
      635,    0,  621,  608,    0,  617,  606,    0,  615,    0,
      615,    0,  611,  633,    0,  622,  631,  622,    0,  605,
        0,  606,  603,  630,  623,  598,  372,  590,    0,  608,
        0,  616,  600,  586,    0,  586,    0,    0,    0,    0,
      603,    0,  609,  593,  571,  560,    0,  562,  536, 1181,
        0,  450,  431,  380,    0,    0,  361,  357,  255,    0,
        0,  246,  234,  171,    0,    0,  147,    0,    0,    0,

        0,    0,    0, 1181,  826,  832,  838,  844,  850,  856,
      862,  868,  874,  880,  886,  888,  894,  900,  902,  908,
      910,  916,  918,  924,  930,  932,  938,  944,  950,  953,
      958
    } ;

static yyconst short int yy_def[632] =
    {   0,
      605,  605,  604,    3,  604,    5,  606,  606,  604,    9,
      607,  607,  608,  608,  609,  609,  610,  610,  611,  611,
      612,  612,  613,  613,  604,   25,  605,  605,  604,  604,
      604,  604,  604,  604,  614,  604,  604,  615,  604,  616,
      616,  616,  616,  616,  604,  614,  604,  604,  617,  618,
      604,  604,  604,  604,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  604,  614,  604,  604,  620,  604,  621,  621,
      621,  621,  604,  604,  604,  614,  604,  604,  622,  604,
      623,  623,  623,  623,  623,  604,  604,  604,  614,  604,

      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      614,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  614,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  614,  604,  604,  624,  604,  604,  604,  604,
      614,  604,  604,  625,  604,  604,  604,  604,  614,  604,
      604,  604,  604,  614,  604,  604,  604,  604,  614,  604,
      604,  626,  626,  626,  626,  626,  627,  604,  604,  604,
      604,  604,  628,  604,  614,  614,  614,  615,  604,  615,
      616,  616,  616,  616,  616,  617,  617,  604,  604,  629,
      604,  604,  604,  604,  604,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  620,  604,  620,  621,
      621,  621,  621,  621,  621,  622,  604,  622,  623,  623,
      623,  623,  623,  624,  624,  604,  625,  625,  604,  626,
      626,  626,  626,  626,  626,  627,  627,  628,  614,  616,
      616,  616,  616,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  630,  604,  604,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  623,
      623,  623,  623,  626,  626,  626,  626,  626,  626,  614,
      616,  616,  616,  616,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  630,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  621,  621,  621,

      621,  621,  621,  621,  621,  621,  621,  621,  623,  623,
      623,  623,  626,  626,  626,  626,  626,  626,  614,  616,
      616,  616,  616,  604,  604,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  621,  621,
      623,  623,  623,  623,  626,  626,  626,  626,  626,  614,
      616,  616,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  621,  621,
      621,  621,  621,  621,  621,  621,  621,  621,  623,  623,
      626,  626,  626,  631,  616,  616,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  621,  621,  621,  621,  621,  621,  621,
      621,  623,  623,  626,  626,  631,  631,  616,  616,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  619,
      621,  621,  621,  621,  621,  623,  623,  626,  626,  604,
      616,  619,  619,  619,  619,  619,  621,  621,  621,  621,
      623,  626,  626,  619,  619,  619,  621,  621,  621,  626,

      626,  619,  621,    0,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604
    } ;

static yyconst short int yy_nxt[1253] =
    {   0,
      604,   31,   31,   32,   31,   34,   32,   45,   35,  604,
       46,   73,   33,  604,   74,   33,   36,   37,   37,   32,
       38,   36,   36,   36,   36,   36,   36,   36,   39,   36,
       36,   36,   36,   36,   36,   36,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   36,
       36,   36,   40,   40,   40,   41,   40,   40,   40,   40,
       40,   40,   40,   40,   42,   40,   40,   40,   40,   43,
       44,   40,   40,   40,   40,   36,   36,   47,   48,   48,
       32,   49,   47,   50,   47,   47,   47,   47,   51,   52,

       53,   53,   53,   54,   47,   47,   47,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   56,   55,   55,   55,   55,   55,   55,   55,
       47,   47,   47,   55,   57,   55,   58,   59,   60,   61,
       55,   55,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   55,   55,   55,   47,   47,   75,   76,
       76,   32,   77,   75,   75,   75,   75,   75,   75,   75,
       78,   75,   75,   75,   75,   75,   75,   75,   98,   34,
      603,   99,   35,  171,  171,  135,  135,   32,  136,  151,
      151,   32,  172,   80,  206,  173,  137,  171,  171,  207,

      152,   75,   75,   75,  602,  156,  156,   32,  113,  113,
       32,  179,  171,  171,  114,  115,  157,  116,   81,  117,
       82,  171,  174,  172,  118,  175,  173,   83,   84,   75,
       76,   85,   32,   77,   86,   75,   75,   75,   75,   75,
       75,   78,   75,   75,   75,   75,   75,   75,   75,  189,
      119,  180,  120,  138,  139,  151,  153,   32,  601,  154,
      172,  171,  174,  173,   80,  175,  152,  156,  158,   32,
      600,  159,   75,   75,   75,  198,  296,  199,  157,   31,
       31,   32,  167,  297,  204,  168,  169,  190,  170,   81,
       33,   82,  191,  205,  192,  192,  192,  599,   83,   84,

       87,   88,   88,   32,   89,   87,   87,   87,   87,   87,
       87,   87,   90,   87,   87,   87,   87,   87,   87,   87,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   87,   87,   87,   91,   91,   91,   92,
       91,   91,   91,   91,   91,   91,   91,   91,   93,   91,
       91,   91,   91,   94,   95,   91,   91,   91,   91,   96,
       97,  101,  101,   32,  200,  580,  201,  102,  103,  202,
      104,  598,  105,  124,  124,   32,  597,  106,  213,  125,
      126,  214,  127,  193,  128,  194,  194,  194,  228,  129,

      135,  140,   32,  136,  141,  216,  217,  218,  223,  171,
      171,  137,  224,  107,  219,  108,  557,   31,   34,   32,
      167,   35,  596,  168,  169,  130,  170,  131,   33,  220,
      225,  237,  221,  253,  226,  171,  174,  314,  229,  175,
      109,  101,  110,   32,  315,  111,  222,  102,  103,  254,
      104,  172,  105,  232,  173,  595,  233,  106,  234,  235,
      171,  174,  171,  171,  175,  171,  171,  172,  138,  139,
      173,  238,  171,  174,  172,  594,  175,  173,  171,  174,
      171,  171,  175,  107,  172,  108,  362,  173,  171,  174,
      171,  171,  175,  172,  171,  174,  173,  335,  175,  171,

      171,  172,  171,  174,  173,  363,  175,  246,  246,  179,
      109,  113,  121,   32,  336,  122,  172,  114,  115,  173,
      116,  228,  117,  172,  246,  249,  173,  118,  175,  171,
      171,  171,  174,  171,  171,  175,  172,  171,  174,  173,
      309,  175,  171,  171,  171,  174,  186,  186,  175,  180,
      192,  192,  192,  119,  310,  120,  124,  132,   32,  237,
      133,  229,  125,  126,  400,  127,  593,  128,  280,  280,
      280,  193,  129,  194,  194,  194,  281,  302,  282,  318,
      319,  303,  320,  401,  321,  325,  447,  283,  284,  326,
      448,  285,  592,  322,  323,  244,  244,  324,  130,  238,

      131,  143,  143,   32,  144,  246,  246,  145,  146,  247,
      247,  591,  147,  246,  249,  256,  256,  175,  145,  146,
      348,  590,  350,  280,  280,  280,  424,  349,  349,  349,
      349,  589,  588,  349,  349,  587,  586,  585,  584,  583,
      582,  581,  557,  145,  579,  146,  143,  148,   32,  144,
      149,  578,  145,  146,  577,  576,  575,  147,  574,  573,
      572,  571,  570,  145,  146,  569,  568,  567,  566,  565,
      564,  563,  562,  561,  560,  559,  558,  557,  555,  554,
      553,  552,  551,  550,  549,  548,  547,  546,  145,  545,
      146,   30,   31,   31,   32,   30,   30,   30,  160,  161,

       30,   30,   30,   33,   30,   30,   30,   30,   30,   30,
       30,  162,  162,  162,  163,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  164,  165,  162,
      162,  162,  166,  162,   30,   30,   30,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
       30,   30,  266,  544,  267,  543,  542,  541,  540,  539,
      538,  268,  269,  537,  536,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  526,  525,  524,  523,  522,  521,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,

      510,  509,  270,  508,  507,  271,  272,  506,  505,  504,
      273,  503,  502,  501,  500,  499,  274,  498,  497,  275,
      496,  276,  495,  277,  494,  278,   30,   30,   30,   30,
       30,   30,   79,   79,   79,   79,   79,   79,  100,  100,
      100,  100,  100,  100,  112,  112,  112,  112,  112,  112,
      123,  123,  123,  123,  123,  123,  134,  134,  134,  134,
      134,  134,  142,  142,  142,  142,  142,  142,  150,  150,
      150,  150,  150,  150,  155,  155,  155,  155,  155,  155,
      176,  493,  176,  176,  176,  176,  178,  492,  178,  178,
      178,  178,  181,  181,  186,  491,  490,  186,  186,  186,

      188,  489,  188,  188,  188,  188,  196,  196,  227,  488,
      227,  227,  227,  227,  230,  230,  236,  487,  236,  236,
      236,  236,  239,  239,  244,  486,  485,  244,  244,  244,
      247,  484,  483,  247,  247,  247,  250,  250,  256,  482,
      481,  256,  256,  256,  258,  480,  258,  258,  258,  258,
      265,  479,  265,  265,  265,  265,  359,  359,  556,  478,
      556,  556,  556,  556,  477,  476,  475,  474,  473,  472,
      471,  470,  469,  468,  467,  466,  465,  464,  463,  462,
      461,  460,  459,  458,  457,  456,  455,  454,  453,  452,
      451,  450,  449,  446,  445,  444,  443,  442,  441,  440,

      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,
      429,  428,  427,  426,  425,  423,  422,  421,  420,  419,
      418,  417,  416,  415,  414,  413,  412,  411,  410,  409,
      408,  407,  406,  405,  404,  403,  402,  399,  398,  397,
      396,  395,  394,  393,  392,  391,  390,  389,  388,  387,
      386,  385,  384,  383,  382,  381,  380,  379,  378,  377,
      376,  375,  374,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  364,  361,  360,  345,  358,  357,  356,  355,
      354,  353,  352,  351,  347,  346,  345,  344,  343,  342,
      341,  340,  257,  339,  338,  337,  334,  248,  245,  333,

      332,  331,  330,  236,  329,  328,  327,  227,  317,  316,
      313,  312,  311,  308,  307,  306,  305,  304,  301,  300,
      299,  298,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  279,  264,  264,  187,  263,  262,  261,  260,
      178,  259,  257,  255,  252,  251,  177,  177,  177,  248,
      177,  245,  177,  177,  177,  177,  243,  242,  241,  240,
      177,  231,  177,  215,  212,  211,  210,  209,  208,  203,
      197,  195,  187,  177,  185,  184,  183,  182,  177,  604,
       29,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,

      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604
    } ;

static yyconst short int yy_chk[1253] =
    {   0,
        0,    1,    1,    1,    2,    2,    2,    4,    2,    0,
        4,    6,    1,    0,    6,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,   10,   26,
      597,   10,   26,   31,   31,   17,   17,   17,   17,   21,
       21,   21,   33,    7,   61,   33,   17,   37,   37,   61,

       21,    7,    7,    7,  594,   23,   23,   23,   13,   13,
       13,   38,   48,   48,   13,   13,   23,   13,    7,   13,
        7,   34,   34,   39,   13,   34,   39,    7,    7,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,   50,
       13,   38,   13,   17,   17,   22,   22,   22,  593,   22,
       52,   45,   45,   52,    8,   45,   22,   24,   24,   24,
      592,   24,    8,    8,    8,   57,  208,   57,   24,   27,
       27,   27,   27,  208,   60,   27,   27,   50,   27,    8,
       27,    8,   51,   60,   51,   51,   51,  589,    8,    8,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   11,   11,   11,   58,  557,   58,   11,   11,   58,
       11,  588,   11,   15,   15,   15,  587,   11,   67,   15,
       15,   67,   15,   53,   15,   53,   53,   53,   77,   15,

       18,   18,   18,   18,   18,   69,   69,   69,   71,   76,
       76,   18,   71,   11,   69,   11,  557,   28,   28,   28,
       28,   28,  584,   28,   28,   15,   28,   15,   28,   70,
       72,   89,   70,  165,   72,   73,   73,  223,   77,   73,
       11,   12,   12,   12,  223,   12,   70,   12,   12,  165,
       12,   78,   12,   81,   78,  583,   81,   12,   82,   82,
       85,   85,   88,   88,   85,  101,  101,   90,   18,   18,
       90,   89,   98,   98,  105,  582,   98,  105,  110,  110,
      113,  113,  110,   12,  117,   12,  283,  117,  121,  121,
      124,  124,  121,  128,  132,  132,  128,  252,  132,  135,

      135,  137,  140,  140,  137,  283,  140,  143,  143,  178,
       12,   14,   14,   14,  252,   14,  147,   14,   14,  147,
       14,  227,   14,  152,  148,  148,  152,   14,  148,  151,
      151,  153,  153,  156,  156,  153,  157,  158,  158,  157,
      219,  158,  171,  171,  174,  174,  187,  187,  174,  178,
      192,  192,  192,   14,  219,   14,   16,   16,   16,  236,
       16,  227,   16,   16,  322,   16,  579,   16,  193,  193,
      193,  194,   16,  194,  194,  194,  197,  213,  197,  226,
      226,  213,  231,  322,  231,  232,  385,  197,  197,  232,
      385,  197,  578,  231,  231,  245,  245,  231,   16,  236,

       16,   19,   19,   19,   19,  246,  246,   19,   19,  248,
      248,  576,   19,  249,  249,  257,  257,  249,   19,   19,
      268,  575,  269,  280,  280,  280,  349,  268,  268,  269,
      269,  574,  573,  349,  349,  571,  566,  564,  563,  562,
      560,  558,  556,   19,  555,   19,   20,   20,   20,   20,
       20,  554,   20,   20,  553,  552,  550,   20,  548,  547,
      546,  544,  543,   20,   20,  541,  539,  537,  536,  534,
      533,  531,  530,  529,  527,  526,  525,  524,  522,  521,
      520,  519,  518,  516,  515,  513,  512,  511,   20,  510,
       20,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,  190,  509,  190,  508,  507,  506,  505,  504,
      500,  190,  190,  499,  497,  496,  495,  494,  493,  487,
      486,  485,  484,  483,  482,  481,  480,  478,  477,  475,
      473,  472,  469,  468,  467,  466,  465,  464,  463,  462,

      461,  460,  190,  459,  458,  190,  190,  456,  454,  452,
      190,  451,  450,  448,  447,  445,  190,  444,  443,  190,
      442,  190,  441,  190,  440,  190,  605,  605,  605,  605,
      605,  605,  606,  606,  606,  606,  606,  606,  607,  607,
      607,  607,  607,  607,  608,  608,  608,  608,  608,  608,
      609,  609,  609,  609,  609,  609,  610,  610,  610,  610,
      610,  610,  611,  611,  611,  611,  611,  611,  612,  612,
      612,  612,  612,  612,  613,  613,  613,  613,  613,  613,
      614,  439,  614,  614,  614,  614,  615,  438,  615,  615,
      615,  615,  616,  616,  617,  437,  435,  617,  617,  617,

      618,  434,  618,  618,  618,  618,  619,  619,  620,  431,
      620,  620,  620,  620,  621,  621,  622,  430,  622,  622,
      622,  622,  623,  623,  624,  429,  428,  624,  624,  624,
      625,  427,  426,  625,  625,  625,  626,  626,  627,  422,
      421,  627,  627,  627,  628,  419,  628,  628,  628,  628,
      629,  418,  629,  629,  629,  629,  630,  630,  631,  417,
      631,  631,  631,  631,  416,  415,  413,  412,  411,  410,
      409,  408,  407,  406,  405,  404,  403,  402,  401,  400,
      399,  398,  397,  395,  394,  393,  392,  391,  390,  389,
      388,  387,  386,  384,  383,  382,  381,  380,  379,  378,

      377,  375,  374,  373,  372,  370,  369,  368,  365,  364,
      363,  362,  361,  360,  359,  344,  343,  342,  341,  340,
      339,  338,  337,  336,  335,  334,  333,  332,  331,  330,
      329,  328,  327,  326,  325,  324,  323,  321,  320,  319,
      318,  317,  316,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  299,
      298,  296,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  285,  284,  282,  281,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  267,  266,  265,  263,  262,  261,
      260,  259,  256,  255,  254,  253,  251,  247,  244,  243,

      242,  241,  240,  238,  235,  234,  233,  229,  225,  224,
      222,  221,  220,  218,  217,  216,  215,  214,  212,  211,
      210,  209,  207,  206,  205,  204,  203,  202,  201,  200,
      199,  198,  191,  189,  188,  186,  185,  184,  183,  182,
      180,  177,  167,  166,  164,  163,  159,  154,  149,  144,
      141,  136,  133,  122,  111,   99,   95,   94,   93,   92,
       86,   80,   74,   68,   66,   65,   64,   63,   62,   59,
       56,   54,   49,   46,   44,   43,   42,   41,   35,   29,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,

      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "moc.l"
#define INITIAL 0
/****************************************************************************
** $Id: moc_lex.cpp,v 1.1 2003/11/04 10:14:21 Sigma Exp $
**
** Lexical analyzer for meta object compiler
**
** Created : 930417
**
** Copyright (C) 1992-2001 Trolltech AS.  All rights reserved.
**
** This file is part of the Qt GUI Toolkit.
**
** This file may be distributed under the terms of the Q Public License
** as defined by Trolltech AS of Norway and appearing in the file
** LICENSE.QPL included in the packaging of this file.
**
** This file may be distributed and/or modified under the terms of the
** GNU General Public License version 2 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.
**
** Licensees holding valid Qt Enterprise Edition or Qt Professional Edition
** licenses may use this file in accordance with the Qt Commercial License
** Agreement provided with the Software.
**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
** See http://www.trolltech.com/pricing.html or email sales@trolltech.com for
**   information about Qt Commercial License Agreements.
** See http://www.trolltech.com/qpl/ for QPL licensing information.
** See http://www.trolltech.com/gpl/ for GPL licensing information.
**
** Contact info@trolltech.com if any conditions of this licensing are
** not clear to you.
**
*****************************************************************************/
#line 39 "moc.l"
#ifdef MOC_YACC_CODE

#ifdef MOC_MWERKS_PLUGIN
#ifdef Q_OS_MAC9
# define isascii(c)   ((int)( (unsigned int) (c) <= (unsigned char)0x7F ))
#endif
const char *buf_buffer = NULL;
long buf_size_total = 0, buf_index = 0;
#define YY_INPUT(buf, result, max_size) \
     { \
          if(buf_index < buf_size_total ) { \
              while(!isascii(buf_buffer[buf_index])) buf_index++; \
              int ms = ((max_size < buf_size_total) ? max_size : buf_size_total); \
              for(result = 0; result < ms; result++) { \
                 char c = buf_buffer[buf_index + result]; \
                 if(!isascii(c)) { \
                    buf_index++; \
                    break; \
                 } \
                 buf[result] = c == '\r' ? '\n' : c; \
              } \
              buf_index += result; \
          } else result = YY_NULL; \
     }
#endif

#include "qstring.h"


#define input yyinput				// yyinput in C++

#define X if(lexDebug){fprintf(stderr,"LEX (%i) : %s\n",lineNo,yytext);};
#define Y if(lexDebug){fprintf(stderr,"LEX (%i) : %s\n",lineNo,yytext);};
/*
#define Y if(lexDebug){fprintf(stderr,"LEX (%i) : %s updates level to %i\n"\
                                 ,lineNo,yytext,templLevel);};
*/
#define Z if(lexDebug){fprintf(stderr,"LEX (%i) : skipped the string %s\"\n"\
                               ,lineNo,yytext);};
#define BEGIN_INSIDE


#define linput() \
    ( (c = input()) == '\n' ? (lineNo++, c) : (c == EOF) ? 0 : c )

#include <string.h>
#include <stdlib.h>

int classPLevel      = 1;  /* Depth of nested curly braces in IN_CLASS */
int namespacePLevel  = 1;  /* Depth of nested curly braces in IN_NAMESPACE */
int expLevel         = 1;  /* Depth of nested parentheses in IN_EXPR */
int enumLevel         = 1;  /* Depth of nested parentheses in IN_ENUM */
int fctLevel         = 1;  /* Depth of nested parentheses in IN_FCT */
int templLevel       = 1;  /* Depth of levels in IN_TEMPL_ARGS */

int lastState        = 0;  /* Remembers the state when a
                              MOC_SKIP_BEGIN is encountered */
int skipLevel        = 0; /* Depth of MOC_SKIP_BEGINs */

class QString;

extern void addExpressionChar( const char );
extern void addExpressionString( const char * );
extern void moc_warn( const char *msg );
#define OUTSIDE 1
#define QT_DEF 2
#define IN_CLASS 3
#define IN_NAMESPACE 4
#define IN_ENUM 5
#define IN_EXPR 6
#define IN_DEF_ARG 7
#define IN_FCT 8
#define IN_TEMPL_ARGS 9
#define GIMME_SEMICOLON 10
#define SKIP 11
#define IN_PROPERTY 12
#define IN_CLASSINFO 13

#line 963 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 110 "moc.l"


#line 1120 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 605 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1181 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 112 "moc.l"
{ X;
				  BEGIN QT_DEF;
				  return CLASS; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 115 "moc.l"
{ X;
				  BEGIN QT_DEF;
				  return NAMESPACE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 118 "moc.l"
{ X;
                                  BEGIN QT_DEF;
				  return USING; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 121 "moc.l"
{ X;
				  BEGIN QT_DEF;
				  return TEMPLATE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 124 "moc.l"
{ X; return Q_OBJECT; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 125 "moc.l"
{ X; return SIGNALS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 126 "moc.l"
{ X; return SLOTS; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 127 "moc.l"
{ X; return Q_CLASSINFO; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 128 "moc.l"
{ X; return Q_PROPERTY; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 129 "moc.l"
{ X; return Q_OVERRIDE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 130 "moc.l"
{ X; return Q_ENUMS; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 131 "moc.l"
{ X; return Q_SETS; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 133 "moc.l"
{ fctLevel++;Y; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 134 "moc.l"
{ fctLevel--;Y;if (fctLevel==0){X;return '}';}}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 135 "moc.l"
{ classPLevel++;Y; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 136 "moc.l"
{ classPLevel--;Y;if (classPLevel == 0)
                                                      {X;return '}';} }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 138 "moc.l"
{ X;if( classPLevel == 1 ) return PUBLIC; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 139 "moc.l"
{ X;if( classPLevel == 1 ) return PROTECTED; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 140 "moc.l"
{ X;if( classPLevel == 1 ) return PRIVATE; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 141 "moc.l"
{ X;if( classPLevel == 1 ) return SIGNALS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 142 "moc.l"
{ X;if( classPLevel == 1 ) return SLOTS; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 143 "moc.l"
{ X;if( classPLevel == 1 ) return Q_CLASSINFO; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 144 "moc.l"
{ X;
				  if ( classPLevel == 1 )
				      return Q_OBJECT;
				  else if ( classPLevel > 1 )
				      moc_warn( "Cannot use Q_OBJECT in nested class." );
				}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 150 "moc.l"
{ X;if( classPLevel == 1 ) return Q_PROPERTY; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 151 "moc.l"
{ X;if( classPLevel == 1 ) return Q_OVERRIDE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 152 "moc.l"
{ X;if( classPLevel == 1 ) return Q_ENUMS; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 153 "moc.l"
{ X;if( classPLevel == 1 ) return Q_SETS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 155 "moc.l"
{ namespacePLevel++;Y; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 156 "moc.l"
{ namespacePLevel--;Y;if (namespacePLevel == 0)
                                                          {X;return '}';}}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 158 "moc.l"
{ X;
                                  BEGIN QT_DEF;
				  return CLASS; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 161 "moc.l"
{ X;
                                  BEGIN QT_DEF;
                                  return TEMPLATE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 164 "moc.l"
{ X;
				  BEGIN QT_DEF;
				  return NAMESPACE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 167 "moc.l"
{ X;
                                  BEGIN QT_DEF;
				  return USING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 171 "moc.l"
{ X; return '('; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 172 "moc.l"
{ X; return ')'; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 173 "moc.l"
{ X; return READ; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 174 "moc.l"
{ X; return WRITE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 175 "moc.l"
{ X; return STORED; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 176 "moc.l"
{ X; return RESET; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 177 "moc.l"
{ X; return DESIGNABLE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 178 "moc.l"
{ X; return SCRIPTABLE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 181 "moc.l"
{ expLevel++;X; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 182 "moc.l"
{ expLevel--;Y;if (expLevel == 0)
					{ X; BEGIN QT_DEF; return ')';} }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 184 "moc.l"
{ expLevel++;X; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 185 "moc.l"
{ expLevel--;X;if (expLevel == 0)
					{ X; BEGIN QT_DEF; return ']';} }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 187 "moc.l"
{ if (expLevel == 0)
					{ X; BEGIN QT_DEF; return ',' ;} }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 189 "moc.l"
{ if (expLevel == 0)
					{ X; BEGIN QT_DEF; return ';' ;} }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 191 "moc.l"
{ expLevel++;X; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 192 "moc.l"
{ expLevel--;Y;if (expLevel == 0)
					{ X; BEGIN QT_DEF; return ')';} }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 194 "moc.l"
{ expLevel++;X; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 195 "moc.l"
{ expLevel--;X;if (expLevel == 0)
					{ X; BEGIN QT_DEF; return ']';} }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 197 "moc.l"
{ if (expLevel <= 1)
					{ X; BEGIN QT_DEF; return ',' ;} }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 199 "moc.l"
{ if (expLevel == 0)
					{ X; BEGIN QT_DEF; return ';' ;} }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 201 "moc.l"
{ enumLevel++;X; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 202 "moc.l"
{ enumLevel--;X; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 203 "moc.l"
{ enumLevel++;X; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 204 "moc.l"
{ enumLevel--;X }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 205 "moc.l"
{ if (enumLevel == 0)
					{ X; BEGIN QT_DEF; return ',' ;} }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 207 "moc.l"
{ if (enumLevel == 0)
					{ X; BEGIN QT_DEF; return ';' ;} }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 209 "moc.l"
{ if (enumLevel == 0)
					{ X; BEGIN QT_DEF; return '}' ;} }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 211 "moc.l"
{ templLevel++;
				  Y;
				  addExpressionChar( yytext[0] );
				}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 215 "moc.l"
{ templLevel--;
				  Y;
				  if ( templLevel == 0 ) {
				      X;
				      BEGIN QT_DEF;
				      return yytext[0];
				  } else {
				      addExpressionChar( yytext[0] );
				  }
				}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 225 "moc.l"
{ X;return FRIEND; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 226 "moc.l"
{ X;return TYPEDEF; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 227 "moc.l"
{ X;return AUTO; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 228 "moc.l"
{ X;return REGISTER; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 229 "moc.l"
{ X;return STATIC; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 230 "moc.l"
{ X;return EXTERN; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 231 "moc.l"
{ X;return INLINE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 232 "moc.l"
{ X;return VIRTUAL; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 233 "moc.l"
{ X;return CONST; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 234 "moc.l"
{ X;return VOLATILE; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 235 "moc.l"
{ X;return CHAR; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 236 "moc.l"
{ X;return SHORT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 237 "moc.l"
{ X;return INT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 238 "moc.l"
{ X;return LONG; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 239 "moc.l"
{ X;return SIGNED; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 240 "moc.l"
{ X;return UNSIGNED; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 241 "moc.l"
{ X;return FLOAT; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 242 "moc.l"
{ X;return DOUBLE; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 243 "moc.l"
{ X;return VOID; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 244 "moc.l"
{ X;return ENUM; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 245 "moc.l"
{ X;return CLASS; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 246 "moc.l"
{ X;return STRUCT; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 247 "moc.l"
{ X;return UNION; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 248 "moc.l"
{ X;return ASM; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 249 "moc.l"
{ X;return PRIVATE; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 250 "moc.l"
{ X;return PROTECTED; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 251 "moc.l"
{ X;return PUBLIC; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 252 "moc.l"
{ X;return OPERATOR; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 253 "moc.l"
{ X;return DBL_COLON; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 254 "moc.l"
{ X;return TRIPLE_DOT; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 255 "moc.l"
{ X;return TEMPLATE; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 256 "moc.l"
{ X;return MUTABLE; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 257 "moc.l"
{ X;return THROW; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 258 "moc.l"
{ X;return USING; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 259 "moc.l"
{ X;return NAMESPACE; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 261 "moc.l"
{
			  X;
			  yylval.string = qstrdup(yytext);
			  return IDENTIFIER;
			}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 267 "moc.l"
{
			  X;
			  yylval.string = qstrdup(yytext);
			  return IDENTIFIER;
			}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 273 "moc.l"
{ X; return '('; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 274 "moc.l"
{ X; return ')'; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 275 "moc.l"
{ X; return ','; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 277 "moc.l"
{
			  X;
			  yylval.string = qstrdup( yytext + 1 );
			  input();		/* discard the '"' */
			  return STRING;
			}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 284 "moc.l"
;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 285 "moc.l"
;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 286 "moc.l"
;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 288 "moc.l"
{				/* discard strings */
			  Z;
			}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 292 "moc.l"
{				/* discard strings */
			  Z;
			}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 296 "moc.l"
{			/* discard strings */
			  Z;
			}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 300 "moc.l"
{			/* discard strings */
			  Z;
			  addExpressionString( yytext );
			  input();		/* discard the '"' */
			}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 307 "moc.l"
{
			  X;
			  addExpressionString( yytext );
			  input();		/* discard the '"' */
			  return STRING;
			}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 314 "moc.l"
{
			  X;
			  yylval.string = qstrdup( yytext + 1 );
			  input();		/* discard the '"' */
			  return STRING;
			}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 321 "moc.l"
{ X;
			  yylval.char_val = yytext[1];
			  return CHAR_VAL;
			}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 326 "moc.l"
{ X;
			 yylval.char_val = '\a';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 331 "moc.l"
{ X;
			 yylval.char_val = '\b';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 336 "moc.l"
{ X;
			 yylval.char_val = '\f';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 341 "moc.l"
{ X;
			 yylval.char_val = '\n';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 346 "moc.l"
{ X;
			 yylval.char_val = '\r';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 351 "moc.l"
{ X;
			 yylval.char_val = '\t';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 356 "moc.l"
{ X;
			 yylval.char_val = '\v';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 361 "moc.l"
{ X;
			 yylval.char_val = '\\';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 366 "moc.l"
{ X;
			 yylval.char_val = '\?';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 371 "moc.l"
{ X;
			 yylval.char_val = '\'';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 376 "moc.l"
{ X;
			 yylval.char_val = '\"';	/* " */
			 return CHAR_VAL;
		       }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 381 "moc.l"
{ X;
			 yylval.char_val = '\0';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 386 "moc.l"
{ X;
			 yylval.char_val =
			   (char)strtol( &yytext[1], 0, 8 );
			 return CHAR_VAL;
		       }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 392 "moc.l"
{ X;
			 yylval.char_val =
			   (char)strtol( &yytext[2], 0, 16 );
			 return CHAR_VAL;
		       }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 398 "moc.l"
{ X;
			 yylval.char_val = ' ';
			 return CHAR_VAL;
		       }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 403 "moc.l"
{ X;
			  yylval.int_val = atoi(yytext);
			  return INT_VAL;
			}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 408 "moc.l"
{ X;
			  yylval.double_val = atof(yytext);
			  return DOUBLE_VAL;
			}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 413 "moc.l"
{ X;
			  yylval.double_val = atof(yytext);
			  return DOUBLE_VAL;
			}
	YY_BREAK
case 132:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 419 "moc.l"
{ /* skip multi-line macro-definitions */
			  int c, c1;
			  input();   /* Discard the '\n'. */
			  do {
			      c1=' ';
			      while((c = linput()) != '\n' && c != 0) c1=c;
			      if (c == 0) break;
			  } while(c1=='\\');
			  unput(c);  /* put back the '\n' or the EOF */
			}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 430 "moc.l"
{ /* preprocessor commands are skipped */}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 431 "moc.l"
{ /* C++ comment */
			  QCString s = yytext;
                          if ( s.contains( "MOC_SKIP_BEGIN" ) ) {
                            skipLevel++;
                            if ( skipLevel == 1 ) {
                              lastState = YYSTATE;
                              BEGIN SKIP;
                            }
                          } else
                          if ( s.contains( "MOC_SKIP_END" ) ) {
                            if ( skipLevel == 0 ) {
                              moc_warn(" MOC_SKIP_END without MOC_SKIP_BEGIN");
                            } else {
                              skipLevel--;
                              if ( skipLevel == 0 ) {
                                BEGIN lastState;
                              }
                            }
                          }
                        }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 451 "moc.l"
{ /* C comment */
			  int c = ' ';
			  do {
			      if ( c!= '*' ) {
				  while((c = linput()) != '*' && c != 0)
				      ;
			      }
			      if (c == 0) break;
			  } while(((c = linput())) != '/' && c != 0);
			  if (c == 0)
			      unput(c);
			}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 464 "moc.l"
{ addExpressionChar( yytext[0] ); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 466 "moc.l"
{
				    /* spaces are important in template args,
				       e.g. Foo<const int> */
				    addExpressionChar( yytext[0] ); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 470 "moc.l"
;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 471 "moc.l"
;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 472 "moc.l"
;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 473 "moc.l"
;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 474 "moc.l"
{ addExpressionChar( yytext[0] ); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 475 "moc.l"
;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 476 "moc.l"
{ addExpressionChar( yytext[0] ); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 477 "moc.l"
;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 478 "moc.l"
;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 479 "moc.l"
{
			  X;
			  return yytext[0];
			}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 483 "moc.l"
{
			  X;
			  return ';';
			}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 487 "moc.l"
{
			  lineNo++;
			}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 492 "moc.l"
ECHO;
	YY_BREAK
#line 2145 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(OUTSIDE):
case YY_STATE_EOF(QT_DEF):
case YY_STATE_EOF(IN_CLASS):
case YY_STATE_EOF(IN_NAMESPACE):
case YY_STATE_EOF(IN_ENUM):
case YY_STATE_EOF(IN_EXPR):
case YY_STATE_EOF(IN_DEF_ARG):
case YY_STATE_EOF(IN_FCT):
case YY_STATE_EOF(IN_TEMPL_ARGS):
case YY_STATE_EOF(GIMME_SEMICOLON):
case YY_STATE_EOF(SKIP):
case YY_STATE_EOF(IN_PROPERTY):
case YY_STATE_EOF(IN_CLASSINFO):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 605 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 605 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 604);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
#include<unistd.h>
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 492 "moc.l"


#endif // MOC_YACC_CODE
